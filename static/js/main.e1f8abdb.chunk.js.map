{"version":3,"sources":["editable-stuff/resume.pdf","components/home/MainBody.jsx","components/home/AboutMe.jsx","components/home/ProjectCard.jsx","components/home/Project.jsx","components/Footer.jsx","components/Navbar.jsx","editable-stuff/blog.jsx","components/blog/BlogBuilder.jsx","components/blog/Blog.jsx","components/blog/BlogPost.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainBody","useState","Array","icons","length","fill","hoverstatus","setHoverstatus","toggleHover","data","newhoverStatus","event","icon","id","className","FirstName","MiddleName","LastName","devDesc","map","key","target","rel","href","url","aria-label","image","split","onMouseOver","onMouseOut","role","AboutMe","instaProfilePic","setInstaProfilePic","showInstaProfilePic","showInsta","setShowInsta","Pdf","resumeURL","useEffect","handleRequest","e","axios","get","instaLink","instaUsername","instaQuerry","then","response","graphql","user","profile_pic_url_hd","catch","error","console","message","finally","src","alt","aboutHeading","aboutDescription","Language","value","setData","useCallback","array","total_count","index","push","language","Math","trunc","ProjectCard","updated_at","setUpdatedAt","handleUpdatetime","date","Date","pushed_at","diff","getTime","hours","toString","day","getDate","monthIndex","getMonth","year","getFullYear","name","description","svn_url","stargazers_count","languages_url","Project","projectsArray","setProjectsArray","gitHubLink","gitHubUsername","gitHubQuerry","slice","projectsLength","projectHeading","project","Footer","backgroundColor","bgStyle","style","Navbar","props","isTop","setIsTop","document","addEventListener","istop","window","scrollY","type","data-toggle","data-target","aria-controls","aria-expanded","showBlog","to","bloglist","blog","title","list","addParagraph","addHeading","getBlog","this","Blog","BlogCard","process","BlogPost","match","params","post","Home","App","basename","showNavigationbar","path","exact","component","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1f8abdb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.af70eaef.pdf\";","import React, { useState } from \"react\";\nimport Typist from \"react-typist\";\nimport {\n  FirstName,\n  LastName,\n  MiddleName,\n  devDesc,\n  icons,\n} from \"../../editable-stuff/configurations.json\";\n\nconst MainBody = () => {\n  // const [backgroundType, setBackgroundType] = useState(Configs.backgroundType);\n  const [hoverstatus, setHoverstatus] = useState(\n    new Array(icons.length).fill(\"socialicons\")\n  );\n\n  const toggleHover = (data) => {\n    const newhoverStatus = [...hoverstatus];\n\n    if (data.event === \"enter\") {\n      newhoverStatus[data.icon.id] = \"socialiconshover\";\n      return setHoverstatus(newhoverStatus);\n    } else if (data.event === \"leave\") {\n      newhoverStatus[data.icon.id] = \"socialicons\";\n      return setHoverstatus(newhoverStatus);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        id=\"home\"\n        className=\"title jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\n      >\n        <div id=\"stars\"></div>\n        <div className=\"container container-fluid text-center \">\n          <h1 className=\"display-1\">\n            {FirstName + \" \" + MiddleName + \" \" + LastName}\n          </h1>\n          <Typist className=\"lead\"> {devDesc}</Typist>\n          <div className=\"p-5\">\n            {icons.map((icon) => (\n              <a\n                key={icon.id}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={icon.url}\n                aria-label={`My ${icon.image.split(\"-\")[1]}`}\n              >\n                <i\n                  className={`fab ${icon.image}  fa-3x ${hoverstatus[icon.id]}`}\n                  onMouseOver={() => toggleHover({ icon, event: \"enter\" })}\n                  onMouseOut={() => toggleHover({ icon, event: \"leave\" })}\n                />\n              </a>\n            ))}\n          </div>\n          <a\n            className=\"btn btn-outline-light btn-lg\"\n            href=\"#aboutme\"\n            role=\"button\"\n            aria-label=\"Learn more about me\"\n          >\n            More about me\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainBody;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Pdf from \"../../editable-stuff/resume.pdf\";\nimport {\n  aboutHeading,\n  aboutDescription,\n  showInstaProfilePic,\n  instaLink,\n  instaUsername,\n  instaQuerry,\n} from \"../../editable-stuff/configurations.json\";\n\nconst AboutMe = () => {\n  const [instaProfilePic, setInstaProfilePic] = useState(\"\");\n  const [showInsta, setShowInsta] = useState(showInstaProfilePic);\n  const [resumeURL] = useState(Pdf);\n\n  useEffect(() => {\n    if (showInsta) {\n      handleRequest();\n    }\n  }, [showInsta]);\n\n  const handleRequest = (e) => {\n    axios\n      .get(instaLink + instaUsername + instaQuerry)\n      .then((response) => {\n        // handle success\n        // console.log(response.data.graphql);\n        return setInstaProfilePic(\n          response.data.graphql.user.profile_pic_url_hd\n        );\n      })\n      .catch((error) => {\n        // handle error\n        setShowInsta(false);\n        return console.error(error.message);\n      })\n      .finally(() => {\n        // always executed\n      });\n  };\n\n  return (\n    <div id=\"aboutme\" className=\"jumbotron jumbotron-fluid m-0\">\n      <div className=\"container container-fluid p-5\">\n        <div className=\"row\">\n          {showInsta && (\n            <div className=\"col-5 d-none d-lg-block align-self-center\">\n              <img\n                className=\"border border-secondary rounded-circle\"\n                src={instaProfilePic}\n                alt=\"profilepicture\"\n              />\n            </div>\n          )}\n          <div className={`col-lg-${showInsta ? \"7\" : \"12\"}`}>\n            <h1 className=\"display-4 mb-5 text-center\">{aboutHeading}</h1>\n            <p className=\"lead text-center\">{aboutDescription}</p>\n            {resumeURL && (\n              <p className=\"lead text-center\">\n                <a\n                  className=\"btn btn-outline-dark btn-lg\"\n                  href={Pdf}\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                  role=\"button\"\n                  aria-label=\"CV\"\n                >\n                  CV\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AboutMe;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\n\nconst ProjectCard = ({ value }) => {\n  const [updated_at, setUpdatedAt] = useState(\"0 mints\");\n\n  const handleUpdatetime = useCallback(\n    (e) => {\n      const date = new Date(value.pushed_at);\n      const nowdate = new Date();\n      const diff = nowdate.getTime() - date.getTime();\n      const hours = Math.trunc(diff / 1000 / 60 / 60);\n\n      if (hours < 24) {\n        return setUpdatedAt(`${hours.toString()} hours ago`);\n      } else {\n        const monthNames = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\",\n        ];\n        const day = date.getDate();\n        const monthIndex = date.getMonth();\n        const year = date.getFullYear();\n\n        return setUpdatedAt(`on ${day} ${monthNames[monthIndex]} ${year}`);\n      }\n    },\n    [value.pushed_at]\n  );\n\n  useEffect(() => {\n    handleUpdatetime();\n  }, [handleUpdatetime]);\n\n  const { name, description, svn_url, stargazers_count, languages_url } = value;\n  return (\n    <div className=\"col-md-6\">\n      <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\n        {/* <img src=\"\" className=\"card-img-top\" alt=\"...\" /> */}\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{name} </h5>\n          <p className=\"card-text\">{description} </p>\n          <a\n            href={`${svn_url}/archive/master.zip`}\n            className=\"btn btn-outline-secondary mr-3\"\n          >\n            <i className=\"fab fa-github\" /> Clone Project\n          </a>\n          <a\n            href={svn_url}\n            target=\" _blank\"\n            className=\"btn btn-outline-secondary\"\n          >\n            <i className=\"fab fa-github\" /> Repo\n          </a>\n          <hr />\n          <Language value={languages_url}></Language>\n          <p className=\"card-text\">\n            <span className=\"text-dark card-link mr-4\">\n              <i className=\"fab fa-github\" /> Stars{\" \"}\n              <span className=\"badge badge-dark\">{stargazers_count}</span>\n            </span>\n            <small className=\"text-muted\">Updated {updated_at}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Language = ({ value }) => {\n  const [data, setData] = useState([]);\n\n  const handleRequest = useCallback(\n    (e) => {\n      axios\n        .get(value)\n        .then((response) => {\n          // handle success\n          // console.log(response.data);\n          return setData(response.data);\n        })\n        .catch((error) => {\n          // handle error\n          return console.error(error.message);\n        })\n        .finally(() => {\n          // always executed\n        });\n    },\n    [value]\n  );\n\n  useEffect(() => {\n    handleRequest();\n  }, [handleRequest]);\n\n  const array = [];\n  let total_count = 0;\n  for (let index in data) {\n    array.push(index);\n    total_count += data[index];\n    // console.log(index, this.state.data[index]);\n  }\n  // console.log(\"array contains \", array, this.state.data[array[0]]);\n\n  return (\n    <div className=\"pb-3\">\n      Languages:{\" \"}\n      {array.map((language) => (\n        <p key={language} className=\"badge badge-light card-link\">\n          {language}: {Math.trunc((data[language] / total_count) * 1000) / 10} %\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport ProjectCard from \"./ProjectCard\";\nimport {\n  projectHeading,\n  gitHubLink,\n  gitHubUsername,\n  gitHubQuerry,\n  projectsLength,\n} from \"../../editable-stuff/configurations.json\";\n\nconst Project = () => {\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const handleRequest = useCallback((e) => {\n    axios\n      .get(gitHubLink + gitHubUsername + gitHubQuerry)\n      .then((response) => {\n        // handle success\n        // console.log(response.data.slice(0, 4));\n        return setProjectsArray(response.data.slice(0, projectsLength));\n      })\n      .catch((error) => {\n        // handle error\n        return console.error(error.message);\n      })\n      .finally(() => {\n        // always executed\n      });\n  }, []);\n\n  useEffect(() => {\n    handleRequest();\n  }, [handleRequest]);\n\n  return (\n    <div id=\"projects\" className=\"jumbotron jumbotron-fluid bg-transparent m-0\">\n      {projectsArray.length && (\n        <div className=\"container container-fluid p-5\">\n          <h1 className=\"display-4 pb-5\">{projectHeading}</h1>\n          <div className=\"row\">\n            {projectsArray.map((project) => (\n              <ProjectCard key={project.id} id={project.id} value={project} />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Project;\n","import React, { useState } from \"react\";\n\nconst Footer = () => {\n  const [bgStyle] = useState({ backgroundColor: \"#f5f5f5\" });\n\n  return (\n    <footer style={bgStyle} className=\"mt-auto py-3 text-center\">\n      {/* <strong> &copy; 2019 </strong>*/}\n      <i className=\"fas fa-code\"></i> with <i className=\"fas fa-heart\"></i> by{\" \"}\n      <a\n        className=\"badge badge-dark\"\n        rel=\"noopener\"\n        href=\"https://github.com/hashirshoaeb\"\n        aria-label=\"My GitHub\"\n      >\n        Hashir Shoaib\n      </a>{\" \"}\n      using <i className=\"fab fa-react\"></i>\n      <p>\n        <small className=\"text-muted\">\n          {\" \"}\n          Project code is open source. Feel free to fork and make your own\n          version.\n        </small>\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pdf from \"../editable-stuff/resume.pdf\";\nimport { showBlog, FirstName } from \"../editable-stuff/configurations.json\";\n\nconst Navbar = (props) => {\n  const [isTop, setIsTop] = useState(true);\n  useEffect(() => {\n    document.addEventListener(\"scroll\", () => {\n      const istop = window.scrollY < 200;\n      if (istop !== isTop) {\n        setIsTop(istop);\n      }\n    });\n  }, [isTop]);\n\n  return (\n    <nav\n      className={`navbar navbar-expand-lg fixed-top navbar-light ${\n        isTop ? \"bg-transparent\" : \"bg-gradient\"\n      } `}\n    >\n      <a className=\"navbar-brand\" href={process.env.PUBLIC_URL + \"/#home\"}>\n        {`<${FirstName} />`}\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo02\"\n        aria-controls=\"navbarTogglerDemo02\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          {showBlog && (\n            <li className=\"nav-item\">\n              <Link\n                className=\"nav-link lead\"\n                to={process.env.PUBLIC_URL + \"/blog\"}\n              >\n                Blog\n              </Link>\n            </li>\n          )}\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link lead\"\n              href={process.env.PUBLIC_URL + \"/#projects\"}\n            >\n              Projects\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link lead\"\n              href={Pdf}\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <b>CV</b>\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link lead\"\n              href={process.env.PUBLIC_URL + \"/#aboutme\"}\n            >\n              <b>About</b>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import { BlogBuilder } from \"../components/blog/BlogBuilder\";\nconst bloglist = [];\n\nconst blog = new BlogBuilder({\n  title: \"How I learned Terraform\",\n  image: \"https://i.imgur.com/wl663oz.png\",\n  description:\n    \"This is a quick blog post explaining how I managed to teach myself Terraform!\",\n})\n  .addHeading(\"Why?\")\n  .addParagraph(\n    \"During AWS re/Start there were somethings we didn't have the time to cover, and although they're very important in reality, they aren't AWS Services so they aren't covered all too much, other than in 'You should know this exists' sense, and James also emphasised the importance of them. Having looked at a few job openings I had also saw a few things popping up over and over again: Terraform and Ansible being two of those.\"\n  )\n  .addHeading(\"Starting Point\")\n  .addParagraph(\n    \"My starting point was simple: Go to the websites. These both had some very nice websites that quite concisely tell you what the tools do but I wanted more, so I went to YouTube. IBM cloud has a number of strong and well presented videos on AWS that I would highly recommend. There were a couple of things I wanted to know coming out of this: why they exist, what they do, and actual use case scenarios.\"\n  )\n  .addHeading(\"Hashicorp Configuration Language\")\n  .addParagraph(\"Just like with every other language there was a coding language to learn called HCL (Hashicorp Configuration Language) - which I honestly didn't find too bad. Once again I sat on YouTube and followed along with a video showing how to set up an AWS Infrastructure with a basic web server through Terraform. It was useful - after troubleshooting my mistakes and getting it working, I had a new project I wanted to do. Earlier in the course, when we had first been learning about AWS, I took the time to setup a small Terraria world server in AWS, nothing major or fancy - but something practical and useful for me in the future. I wanted to try setting up that same infrastructure in Terraform now.\\n Now that I had the skills to use HCL at a basic level, there were some more things I wanted to find solutions to that weren't covered in the video I watched:\\n The video had hard-coded AWS Credentials, which is a major security concern for anything that might be uploaded in the future, it had not used variables whatsoever, and Userdata wouldn't be enough for what I wanted to do, I would also have to learn Ansible and how to deploy it through Terraform.\"\n  )\n  .addHeading(\"Initial Setup\")\n  .addParagraph(\"Initially I simply did something very similar to what was used in the video I watched, not using variables or not configuring user data for now and using the Terraform documentation for any AWS Infrastructure that I needed to provision that wasn't covered in the video. I also went through the process in the AWS Console and noted down the steps there and made sure I had it all down in the .tf files before I continued. I then did a Terraform plan run to see if it was all correct, and... Nope. Ofcourse not, but a few typos, and a little bit of problem solving later it was solved. The server of the type I wanted was now being created by Terraform. But before I moved on I wanted to fix issues mentioned earlier. The first was to change the credentials to not be hard-coded, and this was again fixed by using Google to find resources I needed to know to make it use .aws/credentials instead of being coded into the file. Next-up was changing parts of the script to use variables.\"\n  );\nbloglist.push(blog);\n\nexport default bloglist;\n","import React, { useState, Fragment } from \"react\";\n\nclass BlogBuilder {\n  list = [];\n\n  constructor({ title, image, description }) {\n    this.title = title;\n    this.image = image;\n    this.description = description;\n  }\n\n  addParagraph = (props) => {\n    this.list.push(\n      <p key={this.list.length} className=\"lead\">\n        {props}\n      </p>\n    );\n    return this;\n  };\n\n  addHeading = (props) => {\n    this.list.push(\n      <Fragment key={this.list.length}>\n        <h1 className=\"\">{props}</h1>\n        <hr />\n      </Fragment>\n    );\n    return this;\n  };\n\n  getBlog = () => {\n    return <div className=\"container-lg\">{this.list}</div>;\n  };\n}\n\nexport { BlogBuilder };\n","import React, { useState, Fragment } from \"react\";\nimport { BlogBuilder } from \"./BlogBuilder\";\nimport bloglist from \"../../editable-stuff/blog\";\nimport { Link } from \"react-router-dom\";\nconst Blog = (props) => {\n  return (\n    <div className=\"container-lg mt-5 bg-blue\">\n      <h1 className=\"text-center\">Blogs</h1>\n      {bloglist.map((value, index) => {\n        return (\n          <BlogCard\n            key={index}\n            title={value.title}\n            description={value.description}\n            index={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst BlogCard = ({ index, title, image, description }) => {\n  return (\n    <div className=\"m-5\">\n      <div className=\"\">\n        <div className=\"row\">\n          <div className=\"col-4 col-lg-12\">\n            {/* <img src={image} className=\"card-img\" alt=\"...\" /> */}\n          </div>\n          <div className=\"col-8 col-lg-12\">\n            <div className=\"\">\n              <h1 className=\"\">{title}</h1>\n              <p className=\"lead\">{description}</p>\n              <Link to={`${process.env.PUBLIC_URL}blog/${index}`}>\n                Read more...{\" \"}\n              </Link>\n            </div>\n          </div>\n        </div>\n        <hr />\n      </div>\n    </div>\n  );\n};\n\nexport { Blog, BlogBuilder };\n","import React, { useEffect, useState } from \"react\";\nimport bloglist from \"../../editable-stuff/blog\";\nconst BlogPost = ({ match }) => {\n  const { id } = match.params;\n  const post = bloglist[id];\n\n  return (\n    <div className=\"container-lg mt-5\">\n      {post && (\n        <div>\n          <h1 className=\"display-2 text-center\">{post.title}</h1>\n          <img className=\"img-fluid mb-2\" src={post.image} alt={post.title} />\n          {post.getBlog()}\n        </div>\n      )}\n      {!post && <h1 className=\"display-1 text-center\">404 - Page not found</h1>}\n    </div>\n  );\n};\n\nexport default BlogPost;\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport \"./App.css\";\nimport {\n  showNavigationbar,\n  showBlog,\n} from \"./editable-stuff/configurations.json\";\nimport MainBody from \"./components/home/MainBody\";\nimport AboutMe from \"./components/home/AboutMe\";\nimport Project from \"./components/home/Project\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport { Blog } from \"./components/blog/Blog\";\nimport BlogPost from \"./components/blog/BlogPost\";\n\nconst Home = () => {\n  return (\n    <Fragment>\n      <MainBody />\n      <AboutMe />\n      <Project />\n    </Fragment>\n  );\n};\n\nconst App = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL + \"/\"}>\n    {showNavigationbar && <Navbar />}\n    <Route path=\"/\" exact component={Home} />\n    {showBlog && <Route path=\"/blog\" exact component={Blog} />}\n    {showBlog && <Route path=\"/blog/:id\" component={BlogPost} />}\n    <Footer />\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}